#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third Party
from ipfsapi import connect
from tempfile import gettempdir, NamedTemporaryFile
import os

# ROS
import rospy
import rosbag

# Robonomics communication
from robonomics_msgs.msg import Offer, Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash, Filepath
from ipfs_common.srv import IpfsDownloadFile, IpfsDownloadFileRequest, IpfsDownloadFileResponse


class CheckerNode:

    def __init__(self):
        rospy.init_node('checker')
        rospy.loginfo('Launching checker node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts))  # AIRA ethereum addresses

        rospy.Subscriber('/liability/infochan/incoming/demand',
                         Demand, self.on_incoming_demand)

        self.signing_offer = rospy.Publisher(
            '/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        rospy.loginfo('Checker node is ready!')

    def act(self, incoming):
        tempdir = gettempdir()
        os.chdir(tempdir)

        temp_obj = NamedTemporaryFile(delete=False)

        objective = incoming.objective
        rospy.loginfo("Downloading objective: {}".format(objective))
        rospy.wait_for_service('/ipfs/get_file')
        get_file = rospy.ServiceProxy('/ipfs/get_file', IpfsDownloadFile)

        response = get_file(IpfsDownloadFileRequest(ipfs_address=objective, file=Filepath(temp_obj.name)))

        if response.success:
            rospy.loginfo("Checking objective's data...")
            bag = rosbag.Bag(temp_obj.name)
            for topic, msg, t in bag.read_messages(topics=['/row']):
                print("[{}]: {}".format(t, msg))
                pass  # TODO TODO TODO

            bag.close()

            rospy.loginfo("Looks good! Publishing a demand message")

            self.make_offer(incoming)
        else:
            rospy.logerr("Error while downloading objective!")

    def on_incoming_demand(self, incoming: Demand):
        rospy.loginfo('Incoming demand %s...', str(incoming))
        if (incoming.model.multihash == rospy.get_param('~model') and incoming.token.address == rospy.get_param('~token')):
            rospy.loginfo('For my model and token!')
            self.act(incoming)  # reactive strategy
        else:
            rospy.loginfo('Not fits my model or token, skip it.')

    def make_deadline(self):
        lifetime = int(rospy.get_param('~order_lifetime'))
        deadline = rospy.ServiceProxy(
            '/eth/current_block', BlockNumber)().number + lifetime
        return str(deadline)

    def make_offer(self, incoming):
        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = Multihash()
        offer.model.multihash = rospy.get_param('~model')
        offer.objective = incoming.objective
        offer.token = Address()
        offer.token.address = rospy.get_param('~token')
        offer.cost = incoming.cost
        offer.lighthouse = Address()
        offer.lighthouse.address = rospy.get_param('~lighthouse')
        offer.validator = Address()
        offer.validator.address = rospy.get_param('~validator')
        offer.lighthouseFee = UInt256()
        offer.lighthouseFee.uint256 = '0'
        offer.deadline = UInt256()
        offer.deadline.uint256 = self.make_deadline()

        self.signing_offer.publish(offer)
        rospy.loginfo(offer)

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    CheckerNode().spin()

