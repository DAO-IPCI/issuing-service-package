#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
import json
from collections import namedtuple

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, FinishLiability
from ethereum_common.eth_keyfile_helper import KeyfileHelper

# Web3
from web3 import Web3, HTTPProvider


class IssuerNode:

    def __init__(self):
        rospy.init_node("issuer")
        rospy.loginfo("Launching issuer node...")

        rospy.Subscriber('/liability/ready', Liability, self.subscribe_and_start)

        rospy.wait_for_service('/liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('/liability/start', StartLiability),
                                          rospy.ServiceProxy('/liability/finish', FinishLiability))

        web3_http_provider = rospy.get_param('/liability/listener/web3_http_provider')
        http_provider = HTTPProvider(web3_http_provider)
        self.web3 = Web3(http_provider)

        self.energy_contract_json = json.loads(rospy.get_param("~energy_contract_json"))

        keyfile = rospy.get_param('/liability/infochan/eth/signer/keyfile')
        keyfile_password_file = rospy.get_param('/liability/infochan/eth/signer/keyfile_password_file')
        self.account = KeyfileHelper(keyfile,
                                     keyfile_password_file=keyfile_password_file
                                    ).get_local_account_from_keyfile()

        rospy.loginfo('Issuer node is ready!')

    def task(self, energy):
        rospy.loginfo("Energy {} kW...".format(energy.data))

        # extract total production
        total = int(float(energy.data))

        # send a transaction to the Emitter
        self._send_tx(total)

        self.unregister_all()
        rospy.loginfo('Process complete.')

    def _send_tx(self, total):
        nonce = self.web3.eth.getTransactionCount(self.account.address)
        abi=self.energy_contract_json["abi"]
        energy_token = self.web3.eth.contract(abi=abi, bytecode=self.energy_contract_json["bytecode"])

        deploy_txn = energy_token.constructor().buildTransaction({
            'chainId': 4451,
            'gas': 4000000,
            'gasPrice': self.web3.toWei('0', 'gwei'), # Sidechain only
            'nonce': nonce
            })

        rospy.loginfo("Deploing smart contract")

        signed_txn = self.web3.eth.account.signTransaction(deploy_txn, self.account.privateKey)
        tx_hash = self.web3.eth.sendRawTransaction(signed_txn.rawTransaction)

        self.pub_tx.publish(String(str(tx_hash.hex())))

        rospy.loginfo("Tx hash {}".format(tx_hash.hex()))

        tx_receipt = self.web3.eth.waitForTransactionReceipt(tx_hash)

        rospy.loginfo(tx_receipt)
        if tx_receipt.status == 1:
            token_address = tx_receipt.contractAddress
            self.pub_status.publish(String("Success"))
        else:
            token_address = '0x0000000000000000000000000000000000000000'
            self.pub_status.publish(String("Fail"))
        rospy.loginfo("Token address: {}".format(token_address))
        self.pub_token.publish(String(data=str(token_address)))

        # Mint tokens
        nonce = self.web3.eth.getTransactionCount(self.account.address)

        token_deployed = self.web3.eth.contract(address=token_address, abi=abi)
        mint_txn = token_deployed.functions.mint(self.current_liability.promisee.address, total).buildTransaction({
            'chainId': 4451,
            'gas': 4000000,
            'gasPrice': self.web3.toWei('0', 'gwei'), # Sidechain only
            'nonce': nonce
            })
        signed_txn = self.web3.eth.account.signTransaction(mint_txn, self.account.privateKey)
        tx_hash = self.web3.eth.sendRawTransaction(signed_txn.rawTransaction)

        rospy.loginfo("Mint tx hash {}".format(tx_hash.hex()))

    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process {}...'.format(liability.address.address))

        self.current_liability = liability

        # Register any topics you need to publish logs, data etc
        prefix = '/liability/eth_' + liability.address.address
        self.pub_token = rospy.Publisher(prefix + '/token', String, queue_size=128)
        self.pub_tx = rospy.Publisher(prefix + '/txhash', String, queue_size=128)
        self.pub_unit = rospy.Publisher(prefix + '/unit', String, queue_size=128)
        self.pub_status = rospy.Publisher(prefix + '/status', String, queue_size=128)

        self.sub_energy = rospy.Subscriber(prefix + '/energy', String, self.task)

        self.liability_proxy.start(liability.address)

    def unregister_all(self):
        self.sub_energy.unregister()

        self.liability_proxy.finish(self.current_liability.address, True)

        rospy.sleep(2)

        self.pub_token.unregister()
        self.pub_tx.unregister()
        self.pub_unit.unregister()
        self.pub_status.unregister()

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    IssuerNode().spin()

