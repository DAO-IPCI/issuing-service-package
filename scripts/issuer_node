#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple
from queue import Queue
from threading import Thread
import json

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, FinishLiability

# Web3
from web3 import Web3, HTTPProvider
from eth_keys import keys


class IssuerNode:

    liability_queue = Queue()
    current_liability = None

    def __init__(self):
        rospy.init_node("issuer")
        rospy.loginfo("Launching issuer node...")

        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)
        rospy.Subscriber('next_liability', Liability, self.subscribe_and_start)
        self.next_liability = rospy.Publisher('next_liability', Liability, queue_size=128)

        rospy.wait_for_service('/liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('/liability/start', StartLiability),
                                          rospy.ServiceProxy('/liability/finish', FinishLiability))

        web3_http_provider = rospy.get_param('~web3_http_provider')
        http_provider = HTTPProvider(web3_http_provider)
        self.web3 = Web3(http_provider)

        self.energy_token_address = rospy.get_param("~energy_token")

        self.emitter_contract = rospy.get_param("~emitter_contract")
        self.emitter_contract_abi = json.loads(rospy.get_param("~emitter_contract_abi"))

        word = rospy.get_param("~private_key").strip()
        pk = keys.PrivateKey(Web3.toBytes(hexstr=word))
        self.eth_address = pk.public_key.to_checksum_address()
        self.private_key = pk.to_hex()

        rospy.loginfo('Issuer node is ready!')

    def on_new_liability(self, msg):
        self.liability_queue.put(msg)
        rospy.loginfo("Got new liability %s", msg.address)

    def _process_liability_queue(self):
        while not rospy.is_shutdown() and self.current_liability is None:
            rospy.loginfo("Publishing liability")
            msg = self.liability_queue.get()
            self.next_liability.publish(msg)

    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process...')

        # Register any topics you need to publish logs, data etc
        prefix = '/liability/eth_' + liability.address.address
        pub_data = rospy.Publisher(prefix+'/data', String, queue_size=128)
        pub_token = rospy.Publisher(prefix + '/token', String, queue_size=128)
        pub_total_production = rospy.Publisher(prefix + '/total_production', String, queue_size=128)
        pub_tx = rospy.Publisher(prefix + '/txhash', String, queue_size=128)
        pub_period = rospy.Publisher(prefix + '/period', String, queue_size=128)

        # Store every recieved row
        def accumulate(row):
            rospy.loginfo("New row: {}".format(row.data))
            pub_data.publish(row)

            obj = json.loads(row.data)
            self.last = obj['children'][0]['parameter'][1]['value']['doubleValue'] # exctract total_production
        rospy.Subscriber(prefix + '/row', String, accumulate)
        def time_start(ts):
            self.time_start = ts.data
        rospy.Subscriber(prefix + '/time_start', String, time_start)

        def time_end(te):
            self.time_end = te.data
        rospy.Subscriber(prefix + '/time_end', String, time_end)

        def complete(msg):
            rospy.loginfo("Finishing work...")
            contract = self.web3.eth.contract(address=self.emitter_contract, abi=self.emitter_contract_abi)
            nonce = self.web3.eth.getTransactionCount(self.eth_address)

            total_production = int(self.last * 1000)
            pub_total_production.publish(String(data=str(total_production)))
            pub_token.publish(String(data=self.energy_token_address))

            timestamp = "from {} to {}".format(self.time_start, self.time_end)
            pub_period.publish(String(data=timestamp))

            rospy.loginfo("Sending transaction with args: l {}, t {}, a {}".format(liability.address.address, self.energy_token_address, total_production))

            transfer_txn = contract.functions.issueCertificate(liability.address.address, self.energy_token_address, total_production).buildTransaction({
                'chainId': 4451,
                'gas': 70000,
                'gasPrice': self.web3.toWei('0', 'gwei'),
                'nonce': nonce,
            })
            signed_txn = self.web3.eth.account.signTransaction(transfer_txn, self.private_key)
            tx_hash = self.web3.eth.sendRawTransaction(signed_txn.rawTransaction)

            rospy.loginfo("Tx hash {}".format(tx_hash.hex()))
            pub_tx.publish(String(data=tx_hash.hex()))

            self.liability_proxy.finish(liability.address.address, True)
            rospy.loginfo('Process complete.')
            self.current_liability = None
        rospy.Subscriber(prefix + '/finish', String, complete)

        self.current_liability = liability
        self.liability_proxy.start(liability.address.address)

    def spin(self):
        Thread(target=self._process_liability_queue, daemon=True).start()
        rospy.spin()


if __name__ == "__main__":
    IssuerNode().spin()

