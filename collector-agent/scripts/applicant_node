#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third Party
import psycopg2
import sys
from ipfsapi import connect
from tempfile import NamedTemporaryFile

# ROS
import rospy
from rosbag import Bag
from std_srvs.srv import Empty, EmptyResponse
from std_msgs.msg import String

# Robonomics communication
from robonomics_msgs.msg import Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash


class ApplicantNode:

    def __init__(self):
        rospy.init_node('applicant')
        rospy.loginfo('Launching applicant node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts))  # AIRA ethereum addresses

        self.signing_demand = rospy.Publisher(
            '/liability/infochan/eth/signing/demand', Demand, queue_size=128)

        self.ipfs = connect('https://ipfs.infura.io', 5001)

        rospy.Service('make_demand', Empty, self.act)

        try:
            # Put user name, password etc
            self.connection = psycopg2.connect(
                user="", password="", host="", port="", database="")
            cursor = self.connection.cursor()
            # Print PostgreSQL Connection properties
            print(self.connection.get_dsn_parameters(), "\n")
            # Print PostgreSQL version
            cursor.execute("SELECT version();")
            record = cursor.fetchone()
            print("You are connected to - ", record, "\n")

        except (Exception, psycopg2.Error) as error:
            print("Error while connecting to PostgreSQL", error)
            sys.exit()

        rospy.loginfo('Applicant node is ready!')

    def act(self, data):
        self.make_demand()
        return EmptyResponse()

    def make_deadline(self):
        lifetime = int(rospy.get_param('~order_lifetime'))
        deadline = rospy.ServiceProxy(
            '/eth/current_block', BlockNumber)().number + lifetime
        return str(deadline)

    def make_objective(self):
        with NamedTemporaryFile(delete=False) as tmpfile:
            recorder = Bag(tmpfile.name, 'w')
            rospy.loginfo("Collecting data...")

            cursor = self.connection.cursor()
            cursor.execute("SELECT measure FROM solar;")

            rospy.loginfo("Got {} rows...".format(cursor.rowcount))

            r = rospy.Rate(10)  # 10 Hz
            for item in cursor:
                try:
                    recorder.write('/data', String(data=item[0]))
                except ValueError as e:
                    print("{} {}".format(e, item[0]))
                r.sleep()

            recorder.close()

            ipfs_response = self.ipfs.add(tmpfile.name)
            try:
                msg = ipfs_response['Hash']
            except TypeError:
                rospy.logwarn('IPFS add proceeding error: %s',
                              ipfs_response[1]['Message'])
                msg = ipfs_response[0]['Hash']

            rospy.loginfo('Objective hash: {}'.format(msg.result.multihash))
            return msg

    def make_demand(self):
        rospy.loginfo('Making demand...')

        demand = Demand()
        demand.model = Multihash()
        demand.model.multihash = rospy.get_param('~model')
        demand.objective = Multihash()
        demand.objective.multihash = self.make_objective()
        demand.token = Address()
        demand.token.address = rospy.get_param('~token')
        demand.lighthouse = Address()
        demand.lighthouse.address = rospy.get_param('~lighthouse')
        demand.cost = UInt256()
        demand.cost.uint256 = rospy.get_param('~cost')
        demand.validatorFee = UInt256()
        demand.validatorFee.uint256 = '0'
        demand.validator = Address()
        demand.validator.address = rospy.get_param('~validator')
        demand.deadline = UInt256()
        demand.deadline.uint256 = self.make_deadline()

        self.signing_demand.publish(demand)
        rospy.loginfo(demand)

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    ApplicantNode().spin()
